---
- name: Install PostgreSQL
  apt:
    name: "postgresql-{{ postgres_version }}"
    state: present
    update_cache: yes

- name: Install PostgreSQL contrib
  apt:
    name: "postgresql-contrib-{{ postgres_version }}"
    state: present

- name: Ensure PostgreSQL is running
  service:
    name: "postgresql@{{ postgres_version }}-main"
    state: started
    enabled: yes

- name: Configure PostgreSQL master
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: 0644
  notify: restart postgresql

- name: Configure pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0640
  notify: restart postgresql

- name: Create postgres database
  become: true
  become_user: postgres
  postgresql_db:
    name: postgres

#- name: Set postgres admin password
# postgresql_user:
#   name: postgres
#    password: "{{ lookup('env', 'DB_ADMIN_PASSWORD') }}"
#    role_attr_flags: SUPERUSER
#  no_log: true
- name: Set password via shell (fallback)
  shell: |
    sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '{{ lookup('env', 'DB_ADMIN_PASSWORD') }}';"

- name: Create replication user
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ postgres_repl_user }}"
    password: "{{ postgres_repl_password }}"
    role_attr_flags: "REPLICATION,LOGIN"
    state: present

- name: Create database for bot
  postgresql_db:
    name: "{{ postgres_db_name }}"
  become: yes
  become_user: postgres
- name: Ensure replication slot is clean
  become: yes
  become_user: postgres
  command: |
    psql -d postgres -c "SELECT pg_drop_replication_slot('replica_slot') WHERE EXISTS (
      SELECT 1 FROM pg_replication_slots WHERE slot_name = 'replica_slot'
    );"
  register: drop_slot
  changed_when: drop_slot.rc == 0
  ignore_errors: yes

- name: Create replication slot
  become: yes
  become_user: postgres
  command: |
    psql -d postgres -c "SELECT * FROM pg_create_physical_replication_slot('replica_slot');"
  when: drop_slot is succeeded or drop_slot is skipped

- name: restart postgresql
  become: yes
  service:
    name: "postgresql@{{ postgres_version }}-main"
    state: restarted
